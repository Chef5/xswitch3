(()=>{"use strict";const e={TRIM_JSON:/(,+)([^a-z0-9["])/gi,CHROME_EXTENSION:/^chrome-extension:\/\//i,FORWARD:/\\|\[|]|\(|\)|\*|\$|\^/i,WHITESPACE:/\s+/g,X_HEADER:/^x-/},t="<all_urls>",r="blocking",s={METHODS:"access-control-allow-methods",CREDENTIALS:"access-control-allow-credentials",ORIGIN:"access-control-allow-origin",HEADERS:"access-control-allow-headers"},o="disabled",n="config",a="config_for_shown",i="tab_list",c="active_keys",l="clearCacheEnabled",u="cors",d="corsEnabled",h="proxy",g=!1,R="sync_storage_data_has_been_migarated_to_local",f="images/grey_128.png";var m,p,E,_,w;!function(e){e.REG="reg",e.STRING="string"}(m||(m={})),(w=p||(p={})).YES="enabled",w.NO="disabled",function(e){e.ON="#1890ff",e.OFF="#bfbfbf",e.ERROR="#f5222d"}(E||(E={})),function(e){e.ERROR="Error",e.OFF="OFF",e.ON="ON"}(_||(_={}));const q=(t,r)=>{if(e.FORWARD.test(r)){if(new RegExp(r.replace("??","\\?\\?"),"i").test(t))return m.REG}else if(t.indexOf(r)>-1)return m.STRING;return!1};let b=null;const v=(b||(b=new class{constructor(){this._lastRequestId=null,this._disabled=p.YES,this._config={},this._originRequest=new Map,this._originRequestHeaders=new Map,this._urls=new Array(200)}get urls(){return this._urls}get disabled(){return this._disabled}set disabled(e){this._disabled=e}get config(){return this._config}set config(e){this._config=Object.assign({},e)}onHeadersReceivedCallback(e,t=!0){const r=this.config.cors;let o=!1;if(r&&r.length&&r.forEach(t=>{q(e.url,t)&&(o=!0)}),this.disabled===p.NO||!t||!o)return{};e.url;let n=[],a=(this._originRequest.get(e.requestId)?this._originRequest.get(e.requestId):e.initiator)||"*";if(e.responseHeaders&&e.responseHeaders.filter){let t=!1,r="";n=e.responseHeaders.filter(e=>(s.ORIGIN===e.name.toLowerCase()&&(r=e.value),s.CREDENTIALS===e.name.toLowerCase()&&(t=e.value),[s.ORIGIN,s.CREDENTIALS,s.METHODS,s.HEADERS].indexOf(e.name.toLowerCase())<0)),t&&(a=r)}"*"===a&&"null"===this._originRequest.get(e.requestId)&&(a="*"),n.push({name:s.ORIGIN,value:a}),n.push({name:s.CREDENTIALS,value:"true"}),n.push({name:s.METHODS,value:"*"});let i="";return this._originRequestHeaders.get(e.requestId)&&(i=","+this._originRequestHeaders.get(e.requestId)),n.push({name:s.HEADERS,value:"Content-Type, access-control-allow-headers, Authorization, X-Requested-With, X-Referer"+i}),{responseHeaders:n}}redirectToMatchingRule(t){const r=this.config.proxy;let s=t.url;if(!r||!r.length||e.CHROME_EXTENSION.test(s))return{};/http(s?):\/\/.*\.(js|css|json|jsonp)/.test(s)&&this._urls.indexOf(s)<0&&(this._urls.shift(),this._urls.push(s));try{for(let e=0;e<r.length;e++){const o=r[e];if(o&&o[0]&&"string"==typeof o[1]){const e=o[0],r=q(s,e);if(t.requestId!==this._lastRequestId)if(r===m.REG){const t=new RegExp(e.replace("??","\\?\\?"),"i");s=s.replace(t,o[1])}else r===m.STRING&&(s=s.split(o[0]).join(o[1]))}}}catch(e){console.error("rule match error",e)}return this._lastRequestId=t.requestId,s===t.url?{}:{redirectUrl:s}}onBeforeSendHeadersCallback(t){const r=[];for(let s=0;s<t.requestHeaders.length;++s){const o=t.requestHeaders[s].name.toLowerCase();"origin"===o?this._originRequest.set(t.requestId,t.requestHeaders[s].value):("access-control-request-headers"===o||e.X_HEADER.test(o))&&r.push(o)}return r.length&&this._originRequestHeaders.set(t.requestId,r.join(",")),{requestHeaders:t.requestHeaders}}onBeforeRequestCallback(e){return this.redirectToMatchingRule(e)}}),b);class O{constructor(e){this.storageFn=e.useChromeStorageSyncFn?chrome.storage.sync:chrome.storage.local}get(e,t){return new Promise((r,s)=>{this.storageFn.get(e,e=>{chrome.runtime.lastError?s(chrome.runtime.lastError):(r(e),t&&t(e))})})}set(e,t){return new Promise((r,s)=>{this.storageFn.set(e,()=>{chrome.runtime.lastError?s(chrome.runtime.lastError):(r(e),t&&t(e))})})}}const S=new O({useChromeStorageSyncFn:g});async function I(e){try{await chrome.declarativeNetRequest.updateDynamicRules({removeRuleIds:await y()});const t=function(e){const t=[];let r=1;return e.proxy&&e.proxy.length>0&&e.proxy.forEach((e,s)=>{if(e&&e[0]&&e[1]){const s=e[0],o=e[1],n=function(e){let t=e;return t=t.replace(/\./g,"\\.").replace(/-/g,"\\-"),t=t.replace(/\(\\\.\*\)/g,"(.*)"),t}(s),a=o.replace(/\$(\d+)/g,"\\$1");t.push({id:r++,priority:1,action:{type:"redirect",redirect:{regexSubstitution:a}},condition:{regexFilter:n,resourceTypes:["main_frame","sub_frame","stylesheet","script","image","font","object","xmlhttprequest","ping","csp_report","media","websocket","other"]}})}}),t}(e),r=function(e){const t=[];let r=1e3;return e.cors&&e.cors.length>0&&e.cors.forEach(e=>{t.push({id:r++,priority:1,action:{type:"modifyHeaders",responseHeaders:[{header:"access-control-allow-origin",operation:"set",value:"*"},{header:"access-control-allow-credentials",operation:"set",value:"true"},{header:"access-control-allow-methods",operation:"set",value:"*"},{header:"access-control-allow-headers",operation:"set",value:"Content-Type, access-control-allow-headers, Authorization, X-Requested-With, X-Referer"}]},condition:{urlFilter:`||${e}`,resourceTypes:["xmlhttprequest","websocket"]}})}),t}(e),s=[...t,...r];console.log("allRules---",s),s.length>0&&await chrome.declarativeNetRequest.updateDynamicRules({addRules:s}),console.log(`Updated declarativeNetRequest rules: ${s.length} rules`)}catch(e){console.error("Failed to update declarativeNetRequest rules:",e)}}async function y(){try{return(await chrome.declarativeNetRequest.getDynamicRules()).map(e=>e.id)}catch(e){return console.error("Failed to get dynamic rules:",e),[]}}function H(){return"undefined"!=typeof chrome&&void 0!==chrome.declarativeNetRequest}var N,C,T,A,F,D;!function(){const e={[a]:{0:""},[n]:{},[i]:[{id:"0",name:"Current",active:!0}],[c]:["0"]},t={[R]:{migarated:!1}};S.get(t,t=>{t[R].migarated?console.log("SYNC_STORAGE_DATA_HAS_BEEN_MIGARATED_TO_LOCAL"):chrome.storage.sync.get(e,e=>{const t={[a]:{},[n]:{}};e[i].forEach(r=>{t[a][r.id]=e[a][r.id],t[n][r.id]=e[n][r.id]}),S.set(Object.assign(Object.assign({[R]:{migarated:!0}},e),t))})})}();const x=new O({useChromeStorageSyncFn:g});let L=!1,k=!0,M=!0,j=!1,G=["0"],B={0:{[h]:[],[u]:[]}};function Y(e){const t=[...G],r=e[0];return t.forEach(t=>{e[t]&&"0"!==t&&(e[t][h]&&(r[h]||(r[h]=[]),r[h]=[...r[h],...e[t][h]]),e[t][u]&&(r[u]||(r[u]=[]),r[u]=[...r[u],...e[t][u]]))}),r}function X(e,t){const r=chrome.action||chrome.browserAction;r.setBadgeText({text:""+e}),r.setBadgeBackgroundColor({color:t})}function V(){var e,t;j?X(_.ERROR,E.ERROR):v[o]!==p.NO?X((null===(t=null===(e=v[n])||void 0===e?void 0:e[h])||void 0===t?void 0:t.length)||0,E.ON):X(_.OFF,E.OFF)}function W(){const e=chrome.action||chrome.browserAction;try{if("undefined"!=typeof window&&window.matchMedia){const t=window.matchMedia("(prefers-color-scheme: dark)");t&&t.matches?e.setIcon({path:"images/blue_128.png"}):e.setIcon({path:f})}else e.setIcon({path:f})}catch(t){e.setIcon({path:f})}}x.get({[n]:{0:{[h]:[],[u]:[]}},[c]:["0"]},e=>{if(G=e[c],e&&e[n]){B=e[n];const t=Y(B);v[n]=Object.assign({},t)}else v[n]={[h]:[],[u]:[]},j=!1}),x.get({[o]:p.YES,[l]:p.YES,[d]:p.YES},e=>{v[o]=e[o],k=e[l]===p.YES,M=e[d]===p.YES,V()}),chrome.storage.onChanged.addListener(e=>{if(e[c]&&(G=e[c].newValue),e[n]){const t=Y(e[n].newValue);v[n]=Object.assign({},t)}e[o]&&(v[o]=e[o].newValue),e[l]&&(k=e[l].newValue===p.YES),e[d]&&(M=e[d].newValue===p.YES),x.get({[n]:{0:{[h]:[],[u]:[]}}},e=>{if(e&&e[n]){B=e[n];const t=Y(B);v[n]=Object.assign({},t),H()&&I(t)}V()}),W()}),H()?(I(Y(B)),console.log("Using declarativeNetRequest API")):(console.warn("declarativeNetRequest not available, falling back to webRequest"),null===(C=null===(N=chrome.webRequest)||void 0===N?void 0:N.onBeforeRequest)||void 0===C||C.addListener(e=>v[o]!==p.NO?(k&&function(){if(!L){L=!0;const e=6048e5,t=(new Date).getTime()-e;chrome.browsingData.removeCache({since:t}).then(()=>{L=!1})}}(),v.onBeforeRequestCallback(e)):{},{urls:[t]},[r]),null===(A=null===(T=chrome.webRequest)||void 0===T?void 0:T.onHeadersReceived)||void 0===A||A.addListener(function(e){return v.onHeadersReceivedCallback(e,M)},{urls:[t]},[r,"responseHeaders"]),null===(D=null===(F=chrome.webRequest)||void 0===F?void 0:F.onBeforeSendHeaders)||void 0===D||D.addListener(e=>v.onBeforeSendHeadersCallback(e),{urls:[t]},[r,"requestHeaders"])),W()})();
//# sourceMappingURL=background.min.js.map